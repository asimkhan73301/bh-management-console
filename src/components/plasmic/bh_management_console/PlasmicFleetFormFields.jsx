// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: KEWIT-Fk0Z
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputComponent from "../../InputComponent"; // plasmic-import: qNK1ZRC_DP/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicFleetFormFields.module.css"; // plasmic-import: KEWIT-Fk0Z/css

export const PlasmicFleetFormFields__VariantProps = new Array();

export const PlasmicFleetFormFields__ArgProps = new Array();

function PlasmicFleetFormFields__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <InputComponent
        data-plasmic-name={"vehicalInput"}
        data-plasmic-override={overrides.vehicalInput}
        label={"Available Vehicles"}
        type={"select"}
      />

      <InputComponent
        data-plasmic-name={"driverInput"}
        data-plasmic-override={overrides.driverInput}
        className={classNames("__wab_instance", sty.driverInput)}
        label={"Available Drivers"}
        type={"select"}
      />

      <InputComponent
        data-plasmic-name={"dateInput"}
        data-plasmic-override={overrides.dateInput}
        className={classNames("__wab_instance", sty.dateInput)}
        label={"Date"}
        type={"date"}
      />

      <InputComponent
        data-plasmic-name={"timeInput"}
        data-plasmic-override={overrides.timeInput}
        className={classNames("__wab_instance", sty.timeInput)}
        label={"Time"}
        type={"time"}
      />

      <InputComponent
        data-plasmic-name={"approverInput"}
        data-plasmic-override={overrides.approverInput}
        className={classNames("__wab_instance", sty.approverInput)}
        label={"Approver"}
        type={"select"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "vehicalInput",
    "driverInput",
    "dateInput",
    "timeInput",
    "approverInput"
  ],

  vehicalInput: ["vehicalInput"],
  driverInput: ["driverInput"],
  dateInput: ["dateInput"],
  timeInput: ["timeInput"],
  approverInput: ["approverInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFleetFormFields__ArgProps,
      internalVariantPropNames: PlasmicFleetFormFields__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicFleetFormFields__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFleetFormFields";
  } else {
    func.displayName = `PlasmicFleetFormFields.${nodeName}`;
  }
  return func;
}

export const PlasmicFleetFormFields = Object.assign(
  // Top-level PlasmicFleetFormFields renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    vehicalInput: makeNodeComponent("vehicalInput"),
    driverInput: makeNodeComponent("driverInput"),
    dateInput: makeNodeComponent("dateInput"),
    timeInput: makeNodeComponent("timeInput"),
    approverInput: makeNodeComponent("approverInput"),
    // Metadata about props expected for PlasmicFleetFormFields
    internalVariantProps: PlasmicFleetFormFields__VariantProps,
    internalArgProps: PlasmicFleetFormFields__ArgProps
  }
);

export default PlasmicFleetFormFields;
/* prettier-ignore-end */
