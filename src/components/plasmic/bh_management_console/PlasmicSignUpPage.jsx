// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: uk3JRQVrkv
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InputComponent from "../../InputComponent"; // plasmic-import: qNK1ZRC_DP/component
import Button from "../../Button"; // plasmic-import: btDhG8rl2o/component
import { useScreenVariants } from "../blank_project/PlasmicGlobalVariant__Screen"; // plasmic-import: AUzgs24G0s/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicSignUpPage.module.css"; // plasmic-import: uk3JRQVrkv/css
import logoBackgroundjpg1MyVk98Jv from "./images/logoBackgroundjpg.jpeg"; // plasmic-import: 1MyVk98Jv/picture

export const PlasmicSignUpPage__VariantProps = new Array();

export const PlasmicSignUpPage__ArgProps = new Array();

function PlasmicSignUpPage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__zcg7C)}>
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(defaultcss.all, sty.columns)}
          >
            <div className={classNames(defaultcss.all, sty.column__twpMn)}>
              <img
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(defaultcss.img, sty.img)}
                src={logoBackgroundjpg1MyVk98Jv}
              />
            </div>

            <div className={classNames(defaultcss.all, sty.column__bSzLy)}>
              <div className={classNames(defaultcss.all, sty.freeBox__madhQ)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__yPfl)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__xK7Jj
                    )}
                  >
                    {"Already a member?"}
                  </div>

                  <a
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      defaultcss.a,
                      defaultcss.__wab_text,
                      sty.link
                    )}
                    href={"/sign-in"}
                  >
                    {"Sign In"}
                  </a>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"formWrapper"}
                  data-plasmic-override={overrides.formWrapper}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.formWrapper)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__sC77
                    )}
                  >
                    {"Sign Up to Beacon House"}
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"row"}
                    data-plasmic-override={overrides.row}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.row)}
                  >
                    <InputComponent
                      data-plasmic-name={"nameInput"}
                      data-plasmic-override={overrides.nameInput}
                      className={classNames("__wab_instance", sty.nameInput)}
                      label={"Name"}
                    />

                    <InputComponent
                      data-plasmic-name={"usernameInput"}
                      data-plasmic-override={overrides.usernameInput}
                      className={classNames(
                        "__wab_instance",
                        sty.usernameInput
                      )}
                      label={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__iRa9I
                          )}
                        >
                          {"Username"}
                        </div>
                      }
                    />
                  </p.Stack>

                  <div
                    data-plasmic-name={"row2"}
                    data-plasmic-override={overrides.row2}
                    className={classNames(defaultcss.all, sty.row2)}
                  >
                    <InputComponent
                      data-plasmic-name={"emailInput"}
                      data-plasmic-override={overrides.emailInput}
                      className={classNames("__wab_instance", sty.emailInput)}
                      label={"Email"}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"row3"}
                    data-plasmic-override={overrides.row3}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.row3)}
                  >
                    <InputComponent
                      data-plasmic-name={"passwordInput"}
                      data-plasmic-override={overrides.passwordInput}
                      className={classNames(
                        "__wab_instance",
                        sty.passwordInput
                      )}
                      label={"Password"}
                    />

                    <InputComponent
                      data-plasmic-name={"confirmPasswordInput"}
                      data-plasmic-override={overrides.confirmPasswordInput}
                      className={classNames(
                        "__wab_instance",
                        sty.confirmPasswordInput
                      )}
                      label={"Confirm Password"}
                    />
                  </p.Stack>

                  <div
                    data-plasmic-name={"row4"}
                    data-plasmic-override={overrides.row4}
                    className={classNames(defaultcss.all, sty.row4)}
                  >
                    <Button
                      data-plasmic-name={"signUpButton"}
                      data-plasmic-override={overrides.signUpButton}
                      className={classNames("__wab_instance", sty.signUpButton)}
                      rounded={"rounded"}
                      text={"Register"}
                      type={"secondary"}
                    />
                  </div>
                </p.Stack>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "img",
    "link",
    "formWrapper",
    "row",
    "nameInput",
    "usernameInput",
    "row2",
    "emailInput",
    "row3",
    "passwordInput",
    "confirmPasswordInput",
    "row4",
    "signUpButton"
  ],

  columns: [
    "columns",
    "img",
    "link",
    "formWrapper",
    "row",
    "nameInput",
    "usernameInput",
    "row2",
    "emailInput",
    "row3",
    "passwordInput",
    "confirmPasswordInput",
    "row4",
    "signUpButton"
  ],

  img: ["img"],
  link: ["link"],
  formWrapper: [
    "formWrapper",
    "row",
    "nameInput",
    "usernameInput",
    "row2",
    "emailInput",
    "row3",
    "passwordInput",
    "confirmPasswordInput",
    "row4",
    "signUpButton"
  ],

  row: ["row", "nameInput", "usernameInput"],
  nameInput: ["nameInput"],
  usernameInput: ["usernameInput"],
  row2: ["row2", "emailInput"],
  emailInput: ["emailInput"],
  row3: ["row3", "passwordInput", "confirmPasswordInput"],
  passwordInput: ["passwordInput"],
  confirmPasswordInput: ["confirmPasswordInput"],
  row4: ["row4", "signUpButton"],
  signUpButton: ["signUpButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignUpPage__ArgProps,
      internalVariantPropNames: PlasmicSignUpPage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSignUpPage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpPage";
  } else {
    func.displayName = `PlasmicSignUpPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpPage = Object.assign(
  // Top-level PlasmicSignUpPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),
    formWrapper: makeNodeComponent("formWrapper"),
    row: makeNodeComponent("row"),
    nameInput: makeNodeComponent("nameInput"),
    usernameInput: makeNodeComponent("usernameInput"),
    row2: makeNodeComponent("row2"),
    emailInput: makeNodeComponent("emailInput"),
    row3: makeNodeComponent("row3"),
    passwordInput: makeNodeComponent("passwordInput"),
    confirmPasswordInput: makeNodeComponent("confirmPasswordInput"),
    row4: makeNodeComponent("row4"),
    signUpButton: makeNodeComponent("signUpButton"),
    // Metadata about props expected for PlasmicSignUpPage
    internalVariantProps: PlasmicSignUpPage__VariantProps,
    internalArgProps: PlasmicSignUpPage__ArgProps
  }
);

export default PlasmicSignUpPage;
/* prettier-ignore-end */
