// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: htyyUHdrX7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Card from "../../Card"; // plasmic-import: cbRusPsa56/component
import Badge from "../../Badge"; // plasmic-import: rcqj19I7Oe/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicListRow.module.css"; // plasmic-import: htyyUHdrX7/css
import TrafficJamsvgIcon from "./icons/PlasmicIcon__TrafficJamsvg"; // plasmic-import: 8FGzZD12o/icon
import _51F6Fb256629Fc755B8870C801092942PngOBmXbAsf4 from "./images/_51F6Fb256629Fc755B8870C801092942Png.png"; // plasmic-import: oBMXbASF4/picture

export const PlasmicListRow__VariantProps = new Array("rowType");

export const PlasmicListRow__ArgProps = new Array(
  "icon",
  "typeFields",
  "username",
  "userImage",
  "content"
);

function PlasmicListRow__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Card
        data-plasmic-name={"card"}
        data-plasmic-override={overrides.card}
        className={classNames("__wab_instance", sty.card, {
          [sty.card__rowType_fleet]: hasVariant(variants, "rowType", "fleet")
        })}
        contentOnly={"contentOnly"}
        rounded={"rounded"}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"contentWrapper"}
          data-plasmic-override={overrides.contentWrapper}
          hasGap={true}
          className={classNames(defaultcss.all, sty.contentWrapper)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"leftContent"}
            data-plasmic-override={overrides.leftContent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.leftContent)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox___9Ef1)}
            >
              <div
                data-plasmic-name={"iconWrapper"}
                data-plasmic-override={overrides.iconWrapper}
                className={classNames(defaultcss.all, sty.iconWrapper)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <TrafficJamsvgIcon
                      className={classNames(defaultcss.all, sty.svg__wwcIb)}
                      role={"img"}
                    />
                  ),

                  value: args.icon
                })}
              </div>

              <div
                data-plasmic-name={"contentWrapper2"}
                data-plasmic-override={overrides.contentWrapper2}
                className={classNames(defaultcss.all, sty.contentWrapper2)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__fH7X1
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi urna dolor, porta vitae fermentum malesuada, suscipit nec massa. Pellentesque consequat quam quis mattis aliquet. Nulla id aliquet ante, a gravida nisl. Nulla facilisi. Donec pharetra vitae ligula ut interdum. Etiam porttitor nulla risus, id dignissim ex venenatis eu. Aliquam odio libero, consectetur id leo at, scelerisque ultrices libero. Cras a risus iaculis, dignissim lacus eu, consectetur arcu. Pellentesque tristique faucibus tristique. Mauris lacinia pretium dui. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Integer sit amet euismod quam.\n"
                      }
                    </div>
                  ),

                  value: args.content
                })}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__g4VWn)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <Badge
                      className={classNames("__wab_instance", sty.badge__lkvWk)}
                      size={"small"}
                    />

                    <Badge
                      className={classNames("__wab_instance", sty.badge__wjrP2)}
                      label={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__qnSn
                          )}
                        >
                          {"Plumbing"}
                        </div>
                      }
                      size={"small"}
                    />
                  </React.Fragment>
                ),

                value: args.typeFields
              })}
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"rightContent"}
            data-plasmic-override={overrides.rightContent}
            className={classNames(defaultcss.all, sty.rightContent)}
          >
            <div
              data-plasmic-name={"profile"}
              data-plasmic-override={overrides.profile}
              className={classNames(defaultcss.all, sty.profile)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__iBohC)}
                    src={_51F6Fb256629Fc755B8870C801092942PngOBmXbAsf4}
                  />
                ),

                value: args.userImage
              })}

              {p.renderPlasmicSlot({
                defaultContents: "John Doe",
                value: args.username,
                className: classNames(sty.slotUsername)
              })}
            </div>
          </div>
        </p.Stack>
      </Card>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "card",
    "contentWrapper",
    "leftContent",
    "iconWrapper",
    "contentWrapper2",
    "rightContent",
    "profile"
  ],

  card: [
    "card",
    "contentWrapper",
    "leftContent",
    "iconWrapper",
    "contentWrapper2",
    "rightContent",
    "profile"
  ],

  contentWrapper: [
    "contentWrapper",
    "leftContent",
    "iconWrapper",
    "contentWrapper2",
    "rightContent",
    "profile"
  ],

  leftContent: ["leftContent", "iconWrapper", "contentWrapper2"],
  iconWrapper: ["iconWrapper"],
  contentWrapper2: ["contentWrapper2"],
  rightContent: ["rightContent", "profile"],
  profile: ["profile"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicListRow__ArgProps,
      internalVariantPropNames: PlasmicListRow__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicListRow__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListRow";
  } else {
    func.displayName = `PlasmicListRow.${nodeName}`;
  }
  return func;
}

export const PlasmicListRow = Object.assign(
  // Top-level PlasmicListRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    card: makeNodeComponent("card"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    leftContent: makeNodeComponent("leftContent"),
    iconWrapper: makeNodeComponent("iconWrapper"),
    contentWrapper2: makeNodeComponent("contentWrapper2"),
    rightContent: makeNodeComponent("rightContent"),
    profile: makeNodeComponent("profile"),
    // Metadata about props expected for PlasmicListRow
    internalVariantProps: PlasmicListRow__VariantProps,
    internalArgProps: PlasmicListRow__ArgProps
  }
);

export default PlasmicListRow;
/* prettier-ignore-end */
