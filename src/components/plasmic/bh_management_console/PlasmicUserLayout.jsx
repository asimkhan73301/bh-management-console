// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: TF4eeP5pkV
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: 2ETjiGbh3p/component
import TextInput from "../../TextInput"; // plasmic-import: gb4IIit3yv/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicUserLayout.module.css"; // plasmic-import: TF4eeP5pkV/css
import Icons8SearchsvgIcon from "./icons/PlasmicIcon__Icons8Searchsvg"; // plasmic-import: tdjoboKFAS/icon

export const PlasmicUserLayout__VariantProps = new Array("hideFilters");

export const PlasmicUserLayout__ArgProps = new Array(
  "mainWrapper",
  "children",
  "breadcrumbs"
);

function PlasmicUserLayout__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(defaultcss.all, sty.content)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Sidebar
              className={classNames("__wab_instance", sty.sidebar__usNhm)}
            />
          ),

          value: args.children
        })}

        <div
          data-plasmic-name={"mainWrapper"}
          data-plasmic-override={overrides.mainWrapper}
          className={classNames(defaultcss.all, sty.mainWrapper)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__qiOh)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__foBWe)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___4Ynlg
                      )}
                    >
                      {"Breadcrumb One"}
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__giR5R
                      )}
                    >
                      {">"}
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__sxnlp
                      )}
                    >
                      {"Breadcrumb Two"}
                    </div>
                  </React.Fragment>
                ),

                value: args.breadcrumbs
              })}
            </p.Stack>
          </p.Stack>

          {(
            hasVariant(variants, "hideFilters", "hideFilters") ? true : true
          ) ? (
            <div
              data-plasmic-name={"filterWrapper"}
              data-plasmic-override={overrides.filterWrapper}
              className={classNames(defaultcss.all, sty.filterWrapper, {
                [sty.filterWrapper__hideFilters]: hasVariant(
                  variants,
                  "hideFilters",
                  "hideFilters"
                )
              })}
            >
              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                icon={"icon"}
              >
                <Icons8SearchsvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg)}
                  role={"img"}
                />
              </TextInput>
            </div>
          ) : null}
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.mainWrapper
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "content", "mainWrapper", "filterWrapper", "textInput", "svg"],
  content: ["content", "mainWrapper", "filterWrapper", "textInput", "svg"],
  mainWrapper: ["mainWrapper", "filterWrapper", "textInput", "svg"],
  filterWrapper: ["filterWrapper", "textInput", "svg"],
  textInput: ["textInput", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUserLayout__ArgProps,
      internalVariantPropNames: PlasmicUserLayout__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicUserLayout__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserLayout";
  } else {
    func.displayName = `PlasmicUserLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicUserLayout = Object.assign(
  // Top-level PlasmicUserLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    mainWrapper: makeNodeComponent("mainWrapper"),
    filterWrapper: makeNodeComponent("filterWrapper"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicUserLayout
    internalVariantProps: PlasmicUserLayout__VariantProps,
    internalArgProps: PlasmicUserLayout__ArgProps
  }
);

export default PlasmicUserLayout;
/* prettier-ignore-end */
