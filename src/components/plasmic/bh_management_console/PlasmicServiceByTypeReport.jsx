// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: PTiYGP8uYr
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Table from "../../Table"; // plasmic-import: sMUya_zWwh/component
import TableRow from "../../TableRow"; // plasmic-import: ivRJDBBaYd/component
import TableCell from "../../TableCell"; // plasmic-import: H6KFzMtVnz/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicServiceByTypeReport.module.css"; // plasmic-import: PTiYGP8uYr/css

export const PlasmicServiceByTypeReport__VariantProps = new Array();

export const PlasmicServiceByTypeReport__ArgProps = new Array();

function PlasmicServiceByTypeReport__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text__srrof
          )}
        >
          {"Requested Services Analysis"}
        </div>
      </div>

      <Table
        data-plasmic-name={"table"}
        data-plasmic-override={overrides.table}
        className={classNames("__wab_instance", sty.table)}
      >
        <TableRow className={classNames("__wab_instance", sty.tableRow__owc8G)}>
          <TableCell
            className={classNames("__wab_instance", sty.tableCell__q5Tdx)}
            color={"primary"}
          >
            {"Service Type"}
          </TableCell>

          <TableCell
            className={classNames("__wab_instance", sty.tableCell__sNxa)}
            color={"primary"}
          >
            {"Count"}
          </TableCell>
        </TableRow>

        <TableRow className={classNames("__wab_instance", sty.tableRow__tIcLa)}>
          <TableCell
            className={classNames("__wab_instance", sty.tableCell__e98I5)}
            color={"primaryLight"}
          >
            {"Electronics"}
          </TableCell>

          <TableCell
            className={classNames("__wab_instance", sty.tableCell___8Qkv5)}
          >
            {"35"}
          </TableCell>
        </TableRow>

        <TableRow className={classNames("__wab_instance", sty.tableRow__cbro)}>
          <TableCell
            className={classNames("__wab_instance", sty.tableCell__nrFcz)}
            color={"primaryLight"}
          >
            {"Plumbing"}
          </TableCell>

          <TableCell
            className={classNames("__wab_instance", sty.tableCell___0IIzH)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__ipq3
              )}
            >
              {"28"}
            </div>
          </TableCell>
        </TableRow>

        <TableRow className={classNames("__wab_instance", sty.tableRow__lUpPm)}>
          <TableCell
            className={classNames("__wab_instance", sty.tableCell__rcBni)}
            color={"primaryLight"}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__lQp8V
              )}
            >
              {"Hiring"}
            </div>
          </TableCell>

          <TableCell
            className={classNames("__wab_instance", sty.tableCell__mzGP)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__wpwT2
              )}
            >
              {"8"}
            </div>
          </TableCell>
        </TableRow>
      </Table>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "table"],
  freeBox: ["freeBox"],
  table: ["table"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServiceByTypeReport__ArgProps,
      internalVariantPropNames: PlasmicServiceByTypeReport__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicServiceByTypeReport__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServiceByTypeReport";
  } else {
    func.displayName = `PlasmicServiceByTypeReport.${nodeName}`;
  }
  return func;
}

export const PlasmicServiceByTypeReport = Object.assign(
  // Top-level PlasmicServiceByTypeReport renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    table: makeNodeComponent("table"),
    // Metadata about props expected for PlasmicServiceByTypeReport
    internalVariantProps: PlasmicServiceByTypeReport__VariantProps,
    internalArgProps: PlasmicServiceByTypeReport__ArgProps
  }
);

export default PlasmicServiceByTypeReport;
/* prettier-ignore-end */
