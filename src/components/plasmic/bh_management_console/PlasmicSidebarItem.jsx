// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: cj0PTxmEF4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicSidebarItem.module.css"; // plasmic-import: cj0PTxmEF4/css

export const PlasmicSidebarItem__VariantProps = new Array("selected");

export const PlasmicSidebarItem__ArgProps = new Array(
  "slot",
  "slot2",
  "destination"
);

function PlasmicSidebarItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__selected]: hasVariant(variants, "selected", "selected")
      })}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <svg
            className={classNames(defaultcss.all, sty.svg__bz3Hl)}
            role={"img"}
          />
        ),

        value: args.slot,
        className: classNames(sty.slotTargetSlot, {
          [sty.slotTargetSlot__selected]: hasVariant(
            variants,
            "selected",
            "selected"
          )
        })
      })}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        <a
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(defaultcss.a, sty.link)}
          href={args.destination}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Some link text",
            value: args.slot2,
            className: classNames(sty.slotTargetSlot2, {
              [sty.slotTargetSlot2__selected]: hasVariant(
                variants,
                "selected",
                "selected"
              )
            })
          })}
        </a>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "link"],
  freeBox: ["freeBox", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebarItem__ArgProps,
      internalVariantPropNames: PlasmicSidebarItem__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSidebarItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarItem";
  } else {
    func.displayName = `PlasmicSidebarItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarItem = Object.assign(
  // Top-level PlasmicSidebarItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicSidebarItem
    internalVariantProps: PlasmicSidebarItem__VariantProps,
    internalArgProps: PlasmicSidebarItem__ArgProps
  }
);

export default PlasmicSidebarItem;
/* prettier-ignore-end */
