// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: rcqj19I7Oe
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicBadge.module.css"; // plasmic-import: rcqj19I7Oe/css

export const PlasmicBadge__VariantProps = new Array("size", "color", "kind");

export const PlasmicBadge__ArgProps = new Array("label", "image");

function PlasmicBadge__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_green]: hasVariant(variants, "color", "green"),
        [sty.root__color_red]: hasVariant(variants, "color", "red")
      })}
    >
      {(hasVariant(variants, "kind", "icon") ? true : false) ? (
        <div
          data-plasmic-name={"imageWrapper"}
          data-plasmic-override={overrides.imageWrapper}
          className={classNames(defaultcss.all, sty.imageWrapper, {
            [sty.imageWrapper__kind_icon]: hasVariant(variants, "kind", "icon"),
            [sty.imageWrapper__size_small_kind_icon]:
              hasVariant(variants, "size", "small") &&
              hasVariant(variants, "kind", "icon")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__o8MH)}
              />
            ),

            value: args.image
          })}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox, {
          [sty.freeBox__color_green]: hasVariant(variants, "color", "green"),
          [sty.freeBox__color_red]: hasVariant(variants, "color", "red"),
          [sty.freeBox__kind_icon]: hasVariant(variants, "kind", "icon"),
          [sty.freeBox__size_small]: hasVariant(variants, "size", "small")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Service Kind 1",
          value: args.label,
          className: classNames(sty.slotTargetLabel, {
            [sty.slotTargetLabel__color_red]: hasVariant(
              variants,
              "color",
              "red"
            ),

            [sty.slotTargetLabel__kind_icon]: hasVariant(
              variants,
              "kind",
              "icon"
            ),

            [sty.slotTargetLabel__size_small]: hasVariant(
              variants,
              "size",
              "small"
            )
          })
        })}
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "imageWrapper", "freeBox"],
  imageWrapper: ["imageWrapper"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBadge__ArgProps,
      internalVariantPropNames: PlasmicBadge__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicBadge__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBadge";
  } else {
    func.displayName = `PlasmicBadge.${nodeName}`;
  }
  return func;
}

export const PlasmicBadge = Object.assign(
  // Top-level PlasmicBadge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    imageWrapper: makeNodeComponent("imageWrapper"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicBadge
    internalVariantProps: PlasmicBadge__VariantProps,
    internalArgProps: PlasmicBadge__ArgProps
  }
);

export default PlasmicBadge;
/* prettier-ignore-end */
