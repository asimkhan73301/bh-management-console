// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: ZRO5x17RhRf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputComponent from "../../InputComponent"; // plasmic-import: qNK1ZRC_DP/component
import Button from "../../Button"; // plasmic-import: btDhG8rl2o/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicFormComponent.module.css"; // plasmic-import: ZRO5x17RhRf/css

export const PlasmicFormComponent__VariantProps = new Array();

export const PlasmicFormComponent__ArgProps = new Array(
  "fieldsWrapper",
  "redirectOnSubmitLink"
);

function PlasmicFormComponent__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"contentWrapper"}
        data-plasmic-override={overrides.contentWrapper}
        className={classNames(defaultcss.all, sty.contentWrapper)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"fieldsWrapper"}
          data-plasmic-override={overrides.fieldsWrapper}
          hasGap={true}
          className={classNames(defaultcss.all, sty.fieldsWrapper)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <InputComponent label={"Service Type"} type={"select"} />

                <InputComponent
                  className={classNames(
                    "__wab_instance",
                    sty.inputComponent__h1LUx
                  )}
                  label={"Service Kind"}
                  type={"select"}
                />

                <InputComponent
                  className={classNames(
                    "__wab_instance",
                    sty.inputComponent__gAij
                  )}
                  label={"Description"}
                  type={"multiLineText"}
                />
              </React.Fragment>
            ),

            value: args.fieldsWrapper
          })}
        </p.Stack>

        <div
          data-plasmic-name={"actionContainer"}
          data-plasmic-override={overrides.actionContainer}
          className={classNames(defaultcss.all, sty.actionContainer)}
        >
          <Button
            data-plasmic-name={"declineButton"}
            data-plasmic-override={overrides.declineButton}
            className={classNames("__wab_instance", sty.declineButton)}
            rounded={"rounded"}
            text={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__nriBg
                )}
              >
                {"Decline"}
              </div>
            }
            type={"secondary"}
          />

          <Button
            data-plasmic-name={"submitButton"}
            data-plasmic-override={overrides.submitButton}
            className={classNames("__wab_instance", sty.submitButton)}
            rounded={"rounded"}
            text={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__bbXod
                )}
              >
                {"Submit"}
              </div>
            }
            type={"primary"}
          />
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "contentWrapper",
    "fieldsWrapper",
    "actionContainer",
    "declineButton",
    "submitButton"
  ],

  contentWrapper: [
    "contentWrapper",
    "fieldsWrapper",
    "actionContainer",
    "declineButton",
    "submitButton"
  ],

  fieldsWrapper: ["fieldsWrapper"],
  actionContainer: ["actionContainer", "declineButton", "submitButton"],
  declineButton: ["declineButton"],
  submitButton: ["submitButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFormComponent__ArgProps,
      internalVariantPropNames: PlasmicFormComponent__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicFormComponent__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormComponent";
  } else {
    func.displayName = `PlasmicFormComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicFormComponent = Object.assign(
  // Top-level PlasmicFormComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentWrapper: makeNodeComponent("contentWrapper"),
    fieldsWrapper: makeNodeComponent("fieldsWrapper"),
    actionContainer: makeNodeComponent("actionContainer"),
    declineButton: makeNodeComponent("declineButton"),
    submitButton: makeNodeComponent("submitButton"),
    // Metadata about props expected for PlasmicFormComponent
    internalVariantProps: PlasmicFormComponent__VariantProps,
    internalArgProps: PlasmicFormComponent__ArgProps
  }
);

export default PlasmicFormComponent;
/* prettier-ignore-end */
