// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: R7-uUmA8YC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ListItem from "../../ListItem"; // plasmic-import: T2lyj8FRO_/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicRequestList.module.css"; // plasmic-import: R7-uUmA8YC/css

export const PlasmicRequestList__VariantProps = new Array("userContext");

export const PlasmicRequestList__ArgProps = new Array();

function PlasmicRequestList__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__userContext]: hasVariant(
          variants,
          "userContext",
          "userContext"
        )
      })}
    >
      <ListItem
        adminContext={
          hasVariant(variants, "userContext", "userContext")
            ? undefined
            : "adminContext"
        }
        className={classNames("__wab_instance", sty.listItem__lni0M, {
          [sty.listItem__userContext__lni0MT6D1]: hasVariant(
            variants,
            "userContext",
            "userContext"
          )
        })}
        componentToRender={
          hasVariant(variants, "userContext", "userContext")
            ? "ServiceForm"
            : undefined
        }
        editable={
          hasVariant(variants, "userContext", "userContext")
            ? "editable"
            : undefined
        }
        status={
          hasVariant(variants, "userContext", "userContext")
            ? "approved"
            : "approved"
        }
        view={
          hasVariant(variants, "userContext", "userContext") ? "row" : undefined
        }
      />

      <ListItem
        adminContext={
          hasVariant(variants, "userContext", "userContext")
            ? undefined
            : "adminContext"
        }
        className={classNames("__wab_instance", sty.listItem__i5GNl, {
          [sty.listItem__userContext__i5GNlt6D1]: hasVariant(
            variants,
            "userContext",
            "userContext"
          )
        })}
        componentToRender={
          hasVariant(variants, "userContext", "userContext")
            ? "FleetForm"
            : undefined
        }
        editable={
          hasVariant(variants, "userContext", "userContext")
            ? "editable"
            : undefined
        }
        itemType={"fleet"}
        status={
          hasVariant(variants, "userContext", "userContext")
            ? "rejected"
            : "rejected"
        }
        view={
          hasVariant(variants, "userContext", "userContext") ? "row" : undefined
        }
      />

      <ListItem
        adminContext={
          hasVariant(variants, "userContext", "userContext")
            ? undefined
            : "adminContext"
        }
        className={classNames("__wab_instance", sty.listItem__xsipB, {
          [sty.listItem__userContext__xsipBt6D1]: hasVariant(
            variants,
            "userContext",
            "userContext"
          )
        })}
        componentToRender={
          hasVariant(variants, "userContext", "userContext")
            ? "MeetingRoomForm"
            : undefined
        }
        editable={
          hasVariant(variants, "userContext", "userContext")
            ? "editable"
            : undefined
        }
        itemType={"meetingRoom"}
        status={
          hasVariant(variants, "userContext", "userContext")
            ? "rejected"
            : undefined
        }
        view={
          hasVariant(variants, "userContext", "userContext") ? "row" : undefined
        }
      />

      <ListItem
        adminContext={
          hasVariant(variants, "userContext", "userContext")
            ? undefined
            : "adminContext"
        }
        className={classNames("__wab_instance", sty.listItem__ie1GF, {
          [sty.listItem__userContext__ie1GFt6D1]: hasVariant(
            variants,
            "userContext",
            "userContext"
          )
        })}
        componentToRender={
          hasVariant(variants, "userContext", "userContext")
            ? "MeetingRoomForm"
            : undefined
        }
        editable={
          hasVariant(variants, "userContext", "userContext")
            ? "editable"
            : undefined
        }
        itemType={"meetingRoom"}
        view={
          hasVariant(variants, "userContext", "userContext") ? "row" : undefined
        }
      />

      <ListItem
        adminContext={
          hasVariant(variants, "userContext", "userContext")
            ? undefined
            : "adminContext"
        }
        className={classNames("__wab_instance", sty.listItem__yrlL0, {
          [sty.listItem__userContext__yrlL0T6D1]: hasVariant(
            variants,
            "userContext",
            "userContext"
          )
        })}
        componentToRender={
          hasVariant(variants, "userContext", "userContext")
            ? "ServiceForm"
            : undefined
        }
        editable={
          hasVariant(variants, "userContext", "userContext")
            ? "editable"
            : undefined
        }
        view={
          hasVariant(variants, "userContext", "userContext") ? "row" : undefined
        }
      />

      <ListItem
        adminContext={
          hasVariant(variants, "userContext", "userContext")
            ? undefined
            : "adminContext"
        }
        className={classNames("__wab_instance", sty.listItem___54XwB, {
          [sty.listItem__userContext___54XwBt6D1]: hasVariant(
            variants,
            "userContext",
            "userContext"
          )
        })}
        componentToRender={
          hasVariant(variants, "userContext", "userContext")
            ? "ServiceForm"
            : undefined
        }
        editable={
          hasVariant(variants, "userContext", "userContext")
            ? "editable"
            : undefined
        }
        view={
          hasVariant(variants, "userContext", "userContext") ? "row" : undefined
        }
      />

      <ListItem
        adminContext={
          hasVariant(variants, "userContext", "userContext")
            ? undefined
            : "adminContext"
        }
        className={classNames("__wab_instance", sty.listItem__sDkUo, {
          [sty.listItem__userContext__sDkUoT6D1]: hasVariant(
            variants,
            "userContext",
            "userContext"
          )
        })}
        componentToRender={
          hasVariant(variants, "userContext", "userContext")
            ? "FleetForm"
            : undefined
        }
        editable={
          hasVariant(variants, "userContext", "userContext")
            ? "editable"
            : undefined
        }
        itemType={"fleet"}
        view={
          hasVariant(variants, "userContext", "userContext") ? "row" : undefined
        }
      />

      <ListItem
        adminContext={
          hasVariant(variants, "userContext", "userContext")
            ? undefined
            : "adminContext"
        }
        className={classNames("__wab_instance", sty.listItem__q5Xvt, {
          [sty.listItem__userContext__q5XvtT6D1]: hasVariant(
            variants,
            "userContext",
            "userContext"
          )
        })}
        componentToRender={
          hasVariant(variants, "userContext", "userContext")
            ? "MeetingRoomForm"
            : undefined
        }
        editable={
          hasVariant(variants, "userContext", "userContext")
            ? "editable"
            : undefined
        }
        itemType={"meetingRoom"}
        view={
          hasVariant(variants, "userContext", "userContext") ? "row" : undefined
        }
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRequestList__ArgProps,
      internalVariantPropNames: PlasmicRequestList__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicRequestList__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRequestList";
  } else {
    func.displayName = `PlasmicRequestList.${nodeName}`;
  }
  return func;
}

export const PlasmicRequestList = Object.assign(
  // Top-level PlasmicRequestList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicRequestList
    internalVariantProps: PlasmicRequestList__VariantProps,
    internalArgProps: PlasmicRequestList__ArgProps
  }
);

export default PlasmicRequestList;
/* prettier-ignore-end */
