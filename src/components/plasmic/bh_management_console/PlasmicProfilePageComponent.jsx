// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: xwDhpOnB24
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import UserProfile from "../../UserProfile"; // plasmic-import: JaNyePDMS2/component
import InputComponent from "../../InputComponent"; // plasmic-import: qNK1ZRC_DP/component
import Button from "../../Button"; // plasmic-import: btDhG8rl2o/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicProfilePageComponent.module.css"; // plasmic-import: xwDhpOnB24/css
import _51F6Fb256629Fc755B8870C801092942PngOBmXbAsf4 from "./images/_51F6Fb256629Fc755B8870C801092942Png.png"; // plasmic-import: oBMXbASF4/picture

export const PlasmicProfilePageComponent__VariantProps = new Array();

export const PlasmicProfilePageComponent__ArgProps = new Array("children");

function PlasmicProfilePageComponent__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <UserProfile
        data-plasmic-name={"userProfile"}
        data-plasmic-override={overrides.userProfile}
        className={classNames("__wab_instance", sty.userProfile)}
        userImage={
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img)}
            src={_51F6Fb256629Fc755B8870C801092942PngOBmXbAsf4}
          />
        }
        username={p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__qgavh
              )}
            >
              {"John Doe"}
            </div>
          ),

          value: args.children
        })}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        hasGap={true}
        className={classNames(defaultcss.all, sty.form)}
      >
        <InputComponent
          className={classNames("__wab_instance", sty.inputComponent__iac6)}
          label={"Current Password"}
        />

        <InputComponent
          className={classNames("__wab_instance", sty.inputComponent__c9P5)}
          label={"New Password"}
        />

        <InputComponent
          className={classNames("__wab_instance", sty.inputComponent__g91M)}
          label={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__k9Sw1
              )}
            >
              {"Confirm Password"}
            </div>
          }
        />

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(defaultcss.all, sty.freeBox)}
        >
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            rounded={"rounded"}
            text={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__bvHEk
                )}
              >
                {"Change Password"}
              </div>
            }
            type={"primary"}
          />
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "userProfile", "img", "form", "freeBox", "button"],
  userProfile: ["userProfile", "img"],
  img: ["img"],
  form: ["form", "freeBox", "button"],
  freeBox: ["freeBox", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProfilePageComponent__ArgProps,
      internalVariantPropNames: PlasmicProfilePageComponent__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicProfilePageComponent__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfilePageComponent";
  } else {
    func.displayName = `PlasmicProfilePageComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilePageComponent = Object.assign(
  // Top-level PlasmicProfilePageComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    userProfile: makeNodeComponent("userProfile"),
    img: makeNodeComponent("img"),
    form: makeNodeComponent("form"),
    freeBox: makeNodeComponent("freeBox"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicProfilePageComponent
    internalVariantProps: PlasmicProfilePageComponent__VariantProps,
    internalArgProps: PlasmicProfilePageComponent__ArgProps
  }
);

export default PlasmicProfilePageComponent;
/* prettier-ignore-end */
