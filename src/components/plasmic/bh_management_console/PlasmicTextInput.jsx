// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: gb4IIit3yv
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicTextInput.module.css"; // plasmic-import: gb4IIit3yv/css
import Icons8SearchsvgIcon from "./icons/PlasmicIcon__Icons8Searchsvg"; // plasmic-import: tdjoboKFAS/icon

export const PlasmicTextInput__VariantProps = new Array("icon", "center");

export const PlasmicTextInput__ArgProps = new Array(
  "placeholder",
  "value",
  "size",
  "disabled",
  "children"
);

function PlasmicTextInput__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__icon]: hasVariant(variants, "icon", "icon")
      })}
    >
      {(hasVariant(variants, "icon", "icon") ? true : false) ? (
        <div
          data-plasmic-name={"iconWrapper"}
          data-plasmic-override={overrides.iconWrapper}
          className={classNames(defaultcss.all, sty.iconWrapper, {
            [sty.iconWrapper__icon]: hasVariant(variants, "icon", "icon")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Icons8SearchsvgIcon
                className={classNames(defaultcss.all, sty.svg__teyTl)}
                role={"img"}
              />
            ),

            value: args.children
          })}
        </div>
      ) : null}

      <input
        data-plasmic-name={"textbox"}
        data-plasmic-override={overrides.textbox}
        className={classNames(defaultcss.input, sty.textbox, {
          [sty.textbox__center]: hasVariant(variants, "center", "center"),
          [sty.textbox__icon]: hasVariant(variants, "icon", "icon")
        })}
        disabled={args.disabled}
        placeholder={args.placeholder}
        size={args.size}
        type={"text"}
        value={args.value}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "iconWrapper", "textbox"],
  iconWrapper: ["iconWrapper"],
  textbox: ["textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextInput__ArgProps,
      internalVariantPropNames: PlasmicTextInput__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTextInput__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextInput";
  } else {
    func.displayName = `PlasmicTextInput.${nodeName}`;
  }
  return func;
}

export const PlasmicTextInput = Object.assign(
  // Top-level PlasmicTextInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconWrapper: makeNodeComponent("iconWrapper"),
    textbox: makeNodeComponent("textbox"),
    // Metadata about props expected for PlasmicTextInput
    internalVariantProps: PlasmicTextInput__VariantProps,
    internalArgProps: PlasmicTextInput__ArgProps
  }
);

export default PlasmicTextInput;
/* prettier-ignore-end */
