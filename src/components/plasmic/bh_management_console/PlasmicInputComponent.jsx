// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: qNK1ZRC_DP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: gb4IIit3yv/component
import MultiLineTextInput from "../../MultiLineTextInput"; // plasmic-import: eQfqLbonTV/component
import SelectInput from "../../SelectInput"; // plasmic-import: FBgIYvMF44/component
import CheckboxGroup from "../../CheckboxGroup"; // plasmic-import: 6g0gR0wU0p/component
import CheckboxInput from "../../CheckboxInput"; // plasmic-import: i1Lz6JNtIR/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicInputComponent.module.css"; // plasmic-import: qNK1ZRC_DP/css

export const PlasmicInputComponent__VariantProps = new Array("type");

export const PlasmicInputComponent__ArgProps = new Array(
  "label",
  "children",
  "children2"
);

function PlasmicInputComponent__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__type_time]: hasVariant(variants, "type", "time")
      })}
    >
      <div
        data-plasmic-name={"labelContainer"}
        data-plasmic-override={overrides.labelContainer}
        className={classNames(defaultcss.all, sty.labelContainer)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.label,
          className: classNames(sty.slotLabel)
        })}
      </div>

      <div
        data-plasmic-name={"inputContainer"}
        data-plasmic-override={overrides.inputContainer}
        className={classNames(defaultcss.all, sty.inputContainer, {
          [sty.inputContainer__type_checkbox]: hasVariant(
            variants,
            "type",
            "checkbox"
          ),

          [sty.inputContainer__type_date]: hasVariant(variants, "type", "date"),
          [sty.inputContainer__type_multiLineText]: hasVariant(
            variants,
            "type",
            "multiLineText"
          ),

          [sty.inputContainer__type_select]: hasVariant(
            variants,
            "type",
            "select"
          ),

          [sty.inputContainer__type_text]: hasVariant(variants, "type", "text"),
          [sty.inputContainer__type_time]: hasVariant(variants, "type", "time")
        })}
      >
        {(
          hasVariant(variants, "type", "time")
            ? true
            : hasVariant(variants, "type", "date")
            ? true
            : hasVariant(variants, "type", "checkbox")
            ? true
            : hasVariant(variants, "type", "select")
            ? true
            : hasVariant(variants, "type", "multiLineText")
            ? true
            : true
        ) ? (
          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput, {
              [sty.textInput__type_checkbox]: hasVariant(
                variants,
                "type",
                "checkbox"
              ),

              [sty.textInput__type_date]: hasVariant(variants, "type", "date"),
              [sty.textInput__type_multiLineText]: hasVariant(
                variants,
                "type",
                "multiLineText"
              ),

              [sty.textInput__type_select]: hasVariant(
                variants,
                "type",
                "select"
              ),

              [sty.textInput__type_text]: hasVariant(variants, "type", "text"),
              [sty.textInput__type_time]: hasVariant(variants, "type", "time")
            })}
            disabled={false}
            placeholder={""}
          />
        ) : null}
        {(hasVariant(variants, "type", "multiLineText") ? true : true) ? (
          <MultiLineTextInput
            data-plasmic-name={"multiLineTextInput"}
            data-plasmic-override={overrides.multiLineTextInput}
            className={classNames("__wab_instance", sty.multiLineTextInput, {
              [sty.multiLineTextInput__type_checkbox]: hasVariant(
                variants,
                "type",
                "checkbox"
              ),

              [sty.multiLineTextInput__type_multiLineText]: hasVariant(
                variants,
                "type",
                "multiLineText"
              ),

              [sty.multiLineTextInput__type_text]: hasVariant(
                variants,
                "type",
                "text"
              )
            })}
          />
        ) : null}
        {(hasVariant(variants, "type", "select") ? true : false) ? (
          <SelectInput
            data-plasmic-name={"selectInput"}
            data-plasmic-override={overrides.selectInput}
            className={classNames("__wab_instance", sty.selectInput, {
              [sty.selectInput__type_select]: hasVariant(
                variants,
                "type",
                "select"
              )
            })}
          />
        ) : null}
        {(hasVariant(variants, "type", "checkbox") ? true : false) ? (
          <CheckboxGroup
            data-plasmic-name={"checkboxGroup"}
            data-plasmic-override={overrides.checkboxGroup}
            className={classNames("__wab_instance", sty.checkboxGroup, {
              [sty.checkboxGroup__type_checkbox]: hasVariant(
                variants,
                "type",
                "checkbox"
              )
            })}
          >
            <CheckboxInput
              className={classNames("__wab_instance", sty.checkboxInput__o3Gw7)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.children
              })}
            </CheckboxInput>

            <CheckboxInput
              className={classNames("__wab_instance", sty.checkboxInput__uie6H)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.children2
              })}
            </CheckboxInput>
          </CheckboxGroup>
        ) : null}
        {(hasVariant(variants, "type", "date") ? true : false) ? (
          <div
            data-plasmic-name={"dateInputWrapper"}
            data-plasmic-override={overrides.dateInputWrapper}
            className={classNames(defaultcss.all, sty.dateInputWrapper, {
              [sty.dateInputWrapper__type_date]: hasVariant(
                variants,
                "type",
                "date"
              )
            })}
          />
        ) : null}
        {(hasVariant(variants, "type", "time") ? true : false) ? (
          <div
            data-plasmic-name={"timeInputWrapper"}
            data-plasmic-override={overrides.timeInputWrapper}
            className={classNames(defaultcss.all, sty.timeInputWrapper, {
              [sty.timeInputWrapper__type_time]: hasVariant(
                variants,
                "type",
                "time"
              )
            })}
          />
        ) : null}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "labelContainer",
    "inputContainer",
    "textInput",
    "multiLineTextInput",
    "selectInput",
    "checkboxGroup",
    "dateInputWrapper",
    "timeInputWrapper"
  ],

  labelContainer: ["labelContainer"],
  inputContainer: [
    "inputContainer",
    "textInput",
    "multiLineTextInput",
    "selectInput",
    "checkboxGroup",
    "dateInputWrapper",
    "timeInputWrapper"
  ],

  textInput: ["textInput"],
  multiLineTextInput: ["multiLineTextInput"],
  selectInput: ["selectInput"],
  checkboxGroup: ["checkboxGroup"],
  dateInputWrapper: ["dateInputWrapper"],
  timeInputWrapper: ["timeInputWrapper"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputComponent__ArgProps,
      internalVariantPropNames: PlasmicInputComponent__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicInputComponent__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputComponent";
  } else {
    func.displayName = `PlasmicInputComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicInputComponent = Object.assign(
  // Top-level PlasmicInputComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),
    inputContainer: makeNodeComponent("inputContainer"),
    textInput: makeNodeComponent("textInput"),
    multiLineTextInput: makeNodeComponent("multiLineTextInput"),
    selectInput: makeNodeComponent("selectInput"),
    checkboxGroup: makeNodeComponent("checkboxGroup"),
    dateInputWrapper: makeNodeComponent("dateInputWrapper"),
    timeInputWrapper: makeNodeComponent("timeInputWrapper"),
    // Metadata about props expected for PlasmicInputComponent
    internalVariantProps: PlasmicInputComponent__VariantProps,
    internalArgProps: PlasmicInputComponent__ArgProps
  }
);

export default PlasmicInputComponent;
/* prettier-ignore-end */
