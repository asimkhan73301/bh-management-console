// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: -oqFHJTBGG
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Card from "../../Card"; // plasmic-import: cbRusPsa56/component
import FormComponent from "../../FormComponent"; // plasmic-import: ZRO5x17RhRf/component
import ServiceFormFields from "../../ServiceFormFields"; // plasmic-import: Ngfm-OhqRX/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicGenericFormComponent.module.css"; // plasmic-import: -oqFHJTBGG/css

export const PlasmicGenericFormComponent__VariantProps = new Array();

export const PlasmicGenericFormComponent__ArgProps = new Array(
  "fieldsWrapper",
  "title",
  "redirectOnSubmitLink"
);

function PlasmicGenericFormComponent__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Card
        data-plasmic-name={"card"}
        data-plasmic-override={overrides.card}
        className={classNames("__wab_instance", sty.card)}
        title={p.renderPlasmicSlot({
          defaultContents: "Add Service",
          value: args.title
        })}
      >
        <FormComponent
          data-plasmic-name={"formComponent"}
          data-plasmic-override={overrides.formComponent}
          className={classNames("__wab_instance", sty.formComponent)}
          fieldsWrapper={p.renderPlasmicSlot({
            defaultContents: (
              <ServiceFormFields
                className={classNames(
                  "__wab_instance",
                  sty.serviceFormFields___1EVku
                )}
              />
            ),

            value: args.fieldsWrapper
          })}
          redirectOnSubmitLink={args.redirectOnSubmitLink}
        />
      </Card>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "card", "formComponent"],
  card: ["card", "formComponent"],
  formComponent: ["formComponent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGenericFormComponent__ArgProps,
      internalVariantPropNames: PlasmicGenericFormComponent__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicGenericFormComponent__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGenericFormComponent";
  } else {
    func.displayName = `PlasmicGenericFormComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicGenericFormComponent = Object.assign(
  // Top-level PlasmicGenericFormComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    card: makeNodeComponent("card"),
    formComponent: makeNodeComponent("formComponent"),
    // Metadata about props expected for PlasmicGenericFormComponent
    internalVariantProps: PlasmicGenericFormComponent__VariantProps,
    internalArgProps: PlasmicGenericFormComponent__ArgProps
  }
);

export default PlasmicGenericFormComponent;
/* prettier-ignore-end */
