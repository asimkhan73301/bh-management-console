// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: T2lyj8FRO_
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: btDhG8rl2o/component
import Card from "../../Card"; // plasmic-import: cbRusPsa56/component
import Dialog from "../../Dialog"; // plasmic-import: E5fsqxpowC/component
import UserProfile from "../../UserProfile"; // plasmic-import: JaNyePDMS2/component
import Badge from "../../Badge"; // plasmic-import: rcqj19I7Oe/component
import { useScreenVariants } from "../blank_project/PlasmicGlobalVariant__Screen"; // plasmic-import: AUzgs24G0s/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicListItem.module.css"; // plasmic-import: T2lyj8FRO_/css
import CustomerSupportsvgIcon from "./icons/PlasmicIcon__CustomerSupportsvg"; // plasmic-import: UAOJiIzwc/icon
import TrafficJamsvgIcon from "./icons/PlasmicIcon__TrafficJamsvg"; // plasmic-import: 8FGzZD12o/icon
import GroupMeetingsvgIcon from "./icons/PlasmicIcon__GroupMeetingsvg"; // plasmic-import: UesfMCqru/icon
import Icons8EditsvgIcon from "./icons/PlasmicIcon__Icons8Editsvg"; // plasmic-import: q0bvoFdaIB/icon
import ClocksvgIcon from "./icons/PlasmicIcon__Clocksvg"; // plasmic-import: Nzid9dAsSe/icon
import _51F6Fb256629Fc755B8870C801092942PngOBmXbAsf4 from "./images/_51F6Fb256629Fc755B8870C801092942Png.png"; // plasmic-import: oBMXbASF4/picture
import honda1PngBI0Bqcls3 from "./images/honda1Png.png"; // plasmic-import: bI0Bqcls3/picture

export const PlasmicListItem__VariantProps = new Array(
  "itemType",
  "editable",
  "adminContext"
);

export const PlasmicListItem__ArgProps = new Array("componentToRender");

function PlasmicListItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__adminContext]: hasVariant(
          variants,
          "adminContext",
          "adminContext"
        ),

        [sty.root__editable]: hasVariant(variants, "editable", "editable")
      })}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(
        hasVariant(variants, "adminContext", "adminContext") &&
        triggers.hover_root
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__sJq71, {
            [sty.freeBox__adminContext__sJq71S4It5]: hasVariant(
              variants,
              "adminContext",
              "adminContext"
            )
          })}
        >
          {(
            hasVariant(variants, "adminContext", "adminContext") &&
            triggers.hover_root
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"rejectButton"}
              data-plasmic-override={overrides.rejectButton}
              className={classNames("__wab_instance", sty.rejectButton, {
                [sty.rejectButton__adminContext]: hasVariant(
                  variants,
                  "adminContext",
                  "adminContext"
                )
              })}
              rounded={
                hasVariant(variants, "adminContext", "adminContext") &&
                triggers.hover_root
                  ? "rounded"
                  : undefined
              }
              size={
                hasVariant(variants, "adminContext", "adminContext") &&
                triggers.hover_root
                  ? "sm"
                  : undefined
              }
              text={
                hasVariant(variants, "adminContext", "adminContext") &&
                triggers.hover_root
                  ? "Reject"
                  : "Click Me"
              }
              type={
                hasVariant(variants, "adminContext", "adminContext") &&
                triggers.hover_root
                  ? "secondary"
                  : undefined
              }
            />
          ) : null}
          {(
            hasVariant(variants, "adminContext", "adminContext") &&
            triggers.hover_root
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"acceptButton"}
              data-plasmic-override={overrides.acceptButton}
              className={classNames("__wab_instance", sty.acceptButton, {
                [sty.acceptButton__adminContext]: hasVariant(
                  variants,
                  "adminContext",
                  "adminContext"
                )
              })}
              rounded={
                hasVariant(variants, "adminContext", "adminContext") &&
                triggers.hover_root
                  ? "rounded"
                  : undefined
              }
              size={
                hasVariant(variants, "adminContext", "adminContext") &&
                triggers.hover_root
                  ? "sm"
                  : undefined
              }
              text={
                hasVariant(variants, "adminContext", "adminContext") &&
                triggers.hover_root
                  ? "Approve"
                  : "Click Me"
              }
              type={
                hasVariant(variants, "adminContext", "adminContext") &&
                triggers.hover_root
                  ? "primary"
                  : undefined
              }
            />
          ) : null}
        </p.Stack>
      ) : null}

      <Card
        data-plasmic-name={"card"}
        data-plasmic-override={overrides.card}
        className={classNames("__wab_instance", sty.card, {
          [sty.card__adminContext]: hasVariant(
            variants,
            "adminContext",
            "adminContext"
          ),

          [sty.card__editable]: hasVariant(variants, "editable", "editable")
        })}
        contentOnly={"contentOnly"}
        rounded={"rounded"}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__nFH8)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            hasGap={true}
            className={classNames(defaultcss.all, sty.wrapper, {
              [sty.wrapper__itemType_fleet]: hasVariant(
                variants,
                "itemType",
                "fleet"
              )
            })}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(defaultcss.all, sty.header, {
                [sty.header__adminContext]: hasVariant(
                  variants,
                  "adminContext",
                  "adminContext"
                ),

                [sty.header__editable]: hasVariant(
                  variants,
                  "editable",
                  "editable"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__fdKnu, {
                  [sty.freeBox__adminContext__fdKnus4It5]: hasVariant(
                    variants,
                    "adminContext",
                    "adminContext"
                  )
                })}
              >
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(variants, "itemType", "meetingRoom")
                      ? GroupMeetingsvgIcon
                      : hasVariant(variants, "itemType", "fleet")
                      ? TrafficJamsvgIcon
                      : CustomerSupportsvgIcon
                  }
                  className={classNames(defaultcss.all, sty.svg__rd5Cv, {
                    [sty.svg__itemType_fleet__rd5CvUQr6]: hasVariant(
                      variants,
                      "itemType",
                      "fleet"
                    ),

                    [sty.svg__itemType_meetingRoom__rd5CvW4NkQ]: hasVariant(
                      variants,
                      "itemType",
                      "meetingRoom"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__zmf4Y,
                    {
                      [sty.text__itemType_fleet__zmf4YUQr6]: hasVariant(
                        variants,
                        "itemType",
                        "fleet"
                      ),

                      [sty.text__itemType_meetingRoom__zmf4YW4NkQ]: hasVariant(
                        variants,
                        "itemType",
                        "meetingRoom"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "itemType", "meetingRoom")
                    ? "Meeting Room"
                    : hasVariant(variants, "itemType", "fleet")
                    ? "Fleet"
                    : "Service"}
                </div>
              </p.Stack>

              {(
                hasVariant(variants, "editable", "editable") &&
                triggers.hover_root
                  ? true
                  : hasVariant(variants, "editable", "editable")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"actions"}
                  data-plasmic-override={overrides.actions}
                  className={classNames(defaultcss.all, sty.actions, {
                    [sty.actions__editable]: hasVariant(
                      variants,
                      "editable",
                      "editable"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "editable", "editable") ? true : false
                  ) ? (
                    <Dialog
                      data-plasmic-name={"dialog"}
                      data-plasmic-override={overrides.dialog}
                      buttonText={
                        <Icons8EditsvgIcon
                          className={classNames(
                            defaultcss.all,
                            sty.svg__wCw5P,
                            {
                              [sty.svg__editable__wCw5PjWbr]: hasVariant(
                                variants,
                                "editable",
                                "editable"
                              )
                            }
                          )}
                          role={"img"}
                        />
                      }
                      className={classNames("__wab_instance", sty.dialog, {
                        [sty.dialog__editable]: hasVariant(
                          variants,
                          "editable",
                          "editable"
                        )
                      })}
                      componentToRender={args.componentToRender}
                    />
                  ) : null}
                </div>
              ) : null}
            </div>

            {(
              hasVariant(variants, "adminContext", "adminContext") ? true : true
            ) ? (
              <div
                className={classNames(defaultcss.all, sty.freeBox__sfcGl, {
                  [sty.freeBox__adminContext__sfcGlS4It5]: hasVariant(
                    variants,
                    "adminContext",
                    "adminContext"
                  )
                })}
              >
                <UserProfile
                  className={classNames(
                    "__wab_instance",
                    sty.userProfile__wu3Xi
                  )}
                />
              </div>
            ) : null}

            <div
              className={classNames(defaultcss.all, sty.freeBox__iFvxl, {
                [sty.freeBox__itemType_meetingRoom__iFvxlw4NkQ]: hasVariant(
                  variants,
                  "itemType",
                  "meetingRoom"
                )
              })}
            >
              {(
                hasVariant(variants, "itemType", "meetingRoom") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"roomText"}
                  data-plasmic-override={overrides.roomText}
                  className={classNames(defaultcss.all, sty.roomText, {
                    [sty.roomText__itemType_meetingRoom]: hasVariant(
                      variants,
                      "itemType",
                      "meetingRoom"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "itemType", "meetingRoom")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__f10BV,
                        {
                          [sty.text__itemType_meetingRoom__f10BVw4NkQ]:
                            hasVariant(variants, "itemType", "meetingRoom")
                        }
                      )}
                    >
                      {hasVariant(variants, "itemType", "meetingRoom")
                        ? "Meeting Room 2"
                        : "Enter some text"}
                    </div>
                  ) : null}
                </div>
              ) : null}

              <div
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                className={classNames(defaultcss.all, sty.content, {
                  [sty.content__itemType_fleet]: hasVariant(
                    variants,
                    "itemType",
                    "fleet"
                  ),

                  [sty.content__itemType_meetingRoom]: hasVariant(
                    variants,
                    "itemType",
                    "meetingRoom"
                  )
                })}
              >
                {(hasVariant(variants, "itemType", "fleet") ? true : true) ? (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__fSUi9,
                      {
                        [sty.text__adminContext__fSUi9S4It5]: hasVariant(
                          variants,
                          "adminContext",
                          "adminContext"
                        ),

                        [sty.text__itemType_fleet__fSUi9UQr6]: hasVariant(
                          variants,
                          "itemType",
                          "fleet"
                        ),

                        [sty.text__itemType_meetingRoom__fSUi9W4NkQ]:
                          hasVariant(variants, "itemType", "meetingRoom")
                      }
                    )}
                  >
                    {hasVariant(variants, "itemType", "meetingRoom")
                      ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi urna dolor, porta vitae fermentum malesuada, suscipit nec massa. \n"
                      : "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi urna dolor, porta vitae fermentum malesuada, suscipit nec massa. Pellentesque consequat quam quis mattis aliquet. Nulla id aliquet ante, a gravida nisl. Nulla facilisi. Donec pharetra vitae ligula ut interdum. Etiam porttitor nulla risus, id dignissim ex venenatis eu. Aliquam odio libero, consectetur id leo at, scelerisque ultrices libero. Cras a risus iaculis, dignissim lacus eu, consectetur arcu. Pellentesque tristique faucibus tristique. Mauris lacinia pretium dui. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Integer sit amet euismod quam.\n"}
                  </div>
                ) : null}
                {(hasVariant(variants, "itemType", "fleet") ? true : false) ? (
                  <div
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    className={classNames(defaultcss.all, sty.columns, {
                      [sty.columns__itemType_fleet]: hasVariant(
                        variants,
                        "itemType",
                        "fleet"
                      )
                    })}
                  >
                    {(
                      hasVariant(variants, "itemType", "fleet") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.column__g8Iu,
                          {
                            [sty.column__itemType_fleet__g8IuUQr6]: hasVariant(
                              variants,
                              "itemType",
                              "fleet"
                            )
                          }
                        )}
                      >
                        {(
                          hasVariant(variants, "itemType", "fleet")
                            ? true
                            : false
                        ) ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              defaultcss.all,
                              sty.freeBox__e9YR,
                              {
                                [sty.freeBox__itemType_fleet__e9YRUQr6]:
                                  hasVariant(variants, "itemType", "fleet")
                              }
                            )}
                          >
                            {(
                              hasVariant(variants, "itemType", "fleet")
                                ? true
                                : false
                            ) ? (
                              <div
                                className={classNames(
                                  defaultcss.all,
                                  defaultcss.__wab_text,
                                  sty.text__qaS8T,
                                  {
                                    [sty.text__itemType_fleet__qaS8TUQr6]:
                                      hasVariant(variants, "itemType", "fleet")
                                  }
                                )}
                              >
                                {hasVariant(variants, "itemType", "fleet")
                                  ? "Driver"
                                  : "Enter some text"}
                              </div>
                            ) : null}
                            {(
                              hasVariant(variants, "itemType", "fleet")
                                ? true
                                : false
                            ) ? (
                              <UserProfile
                                className={classNames(
                                  "__wab_instance",
                                  sty.userProfile__efyu,
                                  {
                                    [sty.userProfile__itemType_fleet__efyuUQr6]:
                                      hasVariant(variants, "itemType", "fleet")
                                  }
                                )}
                                userImage={
                                  <img
                                    alt={""}
                                    className={classNames(
                                      defaultcss.img,
                                      sty.img__z0I9Z,
                                      {
                                        [sty.img__itemType_fleet__z0I9ZUQr6]:
                                          hasVariant(
                                            variants,
                                            "itemType",
                                            "fleet"
                                          )
                                      }
                                    )}
                                    src={
                                      _51F6Fb256629Fc755B8870C801092942PngOBmXbAsf4
                                    }
                                  />
                                }
                                username={
                                  <div
                                    className={classNames(
                                      defaultcss.all,
                                      defaultcss.__wab_text,
                                      sty.text___5EadP,
                                      {
                                        [sty.text__itemType_fleet___5EadPUQr6]:
                                          hasVariant(
                                            variants,
                                            "itemType",
                                            "fleet"
                                          )
                                      }
                                    )}
                                  >
                                    {hasVariant(variants, "itemType", "fleet")
                                      ? "Ali Hussain"
                                      : "John Doe"}
                                  </div>
                                }
                              />
                            ) : null}
                          </p.Stack>
                        ) : null}
                      </div>
                    ) : null}
                    {(
                      hasVariant(variants, "itemType", "fleet") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.column__sWmGh,
                          {
                            [sty.column__itemType_fleet__sWmGhUQr6]: hasVariant(
                              variants,
                              "itemType",
                              "fleet"
                            )
                          }
                        )}
                      >
                        {(
                          hasVariant(variants, "itemType", "fleet")
                            ? true
                            : false
                        ) ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              defaultcss.all,
                              sty.freeBox__lkeKl,
                              {
                                [sty.freeBox__itemType_fleet__lkeKlUQr6]:
                                  hasVariant(variants, "itemType", "fleet")
                              }
                            )}
                          >
                            {(
                              hasVariant(variants, "itemType", "fleet")
                                ? true
                                : false
                            ) ? (
                              <div
                                className={classNames(
                                  defaultcss.all,
                                  defaultcss.__wab_text,
                                  sty.text__tbRo9,
                                  {
                                    [sty.text__itemType_fleet__tbRo9UQr6]:
                                      hasVariant(variants, "itemType", "fleet")
                                  }
                                )}
                              >
                                {hasVariant(variants, "itemType", "fleet")
                                  ? "Vehical"
                                  : "Enter some text"}
                              </div>
                            ) : null}
                            {(
                              hasVariant(variants, "itemType", "fleet")
                                ? true
                                : false
                            ) ? (
                              <UserProfile
                                className={classNames(
                                  "__wab_instance",
                                  sty.userProfile___2UUtD,
                                  {
                                    [sty.userProfile__itemType_fleet___2UUtDUQr6]:
                                      hasVariant(variants, "itemType", "fleet")
                                  }
                                )}
                                userImage={
                                  <img
                                    alt={""}
                                    className={classNames(
                                      defaultcss.img,
                                      sty.img__pzm2B,
                                      {
                                        [sty.img__itemType_fleet__pzm2BUQr6]:
                                          hasVariant(
                                            variants,
                                            "itemType",
                                            "fleet"
                                          )
                                      }
                                    )}
                                    src={
                                      hasVariant(variants, "itemType", "fleet")
                                        ? honda1PngBI0Bqcls3
                                        : _51F6Fb256629Fc755B8870C801092942PngOBmXbAsf4
                                    }
                                  />
                                }
                                username={
                                  <div
                                    className={classNames(
                                      defaultcss.all,
                                      defaultcss.__wab_text,
                                      sty.text__olRdN,
                                      {
                                        [sty.text__itemType_fleet__olRdNUQr6]:
                                          hasVariant(
                                            variants,
                                            "itemType",
                                            "fleet"
                                          )
                                      }
                                    )}
                                  >
                                    {hasVariant(variants, "itemType", "fleet")
                                      ? "Honda City"
                                      : "John Doe"}
                                  </div>
                                }
                              />
                            ) : null}
                          </p.Stack>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"extraInfo"}
            data-plasmic-override={overrides.extraInfo}
            hasGap={true}
            className={classNames(defaultcss.all, sty.extraInfo, {
              [sty.extraInfo__itemType_fleet]: hasVariant(
                variants,
                "itemType",
                "fleet"
              ),

              [sty.extraInfo__itemType_meetingRoom]: hasVariant(
                variants,
                "itemType",
                "meetingRoom"
              )
            })}
          >
            {(hasVariant(variants, "itemType", "fleet") ? true : true) ? (
              <Badge
                className={classNames("__wab_instance", sty.badge__sAxf4, {
                  [sty.badge__itemType_fleet__sAxf4UQr6]: hasVariant(
                    variants,
                    "itemType",
                    "fleet"
                  )
                })}
                label={
                  hasVariant(variants, "itemType", "meetingRoom")
                    ? "Refreshment"
                    : "Service Kind 1"
                }
                size={"small"}
              />
            ) : null}
            {(
              hasVariant(variants, "itemType", "meetingRoom")
                ? true
                : hasVariant(variants, "itemType", "fleet")
                ? true
                : true
            ) ? (
              <Badge
                className={classNames("__wab_instance", sty.badge__cu2WD, {
                  [sty.badge__itemType_fleet__cu2WDUQr6]: hasVariant(
                    variants,
                    "itemType",
                    "fleet"
                  ),

                  [sty.badge__itemType_meetingRoom__cu2WDw4NkQ]: hasVariant(
                    variants,
                    "itemType",
                    "meetingRoom"
                  )
                })}
                label={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__jwJuR
                    )}
                  >
                    {"Plumbing"}
                  </div>
                }
                size={"small"}
              />
            ) : null}
            {(
              hasVariant(variants, "itemType", "meetingRoom")
                ? true
                : hasVariant(variants, "itemType", "fleet")
                ? true
                : false
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"timeInfo"}
                data-plasmic-override={overrides.timeInfo}
                hasGap={true}
                className={classNames(defaultcss.all, sty.timeInfo, {
                  [sty.timeInfo__itemType_fleet]: hasVariant(
                    variants,
                    "itemType",
                    "fleet"
                  ),

                  [sty.timeInfo__itemType_meetingRoom]: hasVariant(
                    variants,
                    "itemType",
                    "meetingRoom"
                  )
                })}
              >
                {(
                  hasVariant(variants, "itemType", "meetingRoom")
                    ? true
                    : hasVariant(variants, "itemType", "fleet")
                    ? true
                    : false
                ) ? (
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(variants, "itemType", "meetingRoom")
                        ? ClocksvgIcon
                        : hasVariant(variants, "itemType", "fleet")
                        ? ClocksvgIcon
                        : "div"
                    }
                    className={classNames(defaultcss.all, sty.svg___6QboC, {
                      [sty.svg__itemType_fleet___6QboCUQr6]: hasVariant(
                        variants,
                        "itemType",
                        "fleet"
                      ),

                      [sty.svg__itemType_meetingRoom___6QboCw4NkQ]: hasVariant(
                        variants,
                        "itemType",
                        "meetingRoom"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
                {(
                  hasVariant(variants, "itemType", "meetingRoom")
                    ? true
                    : hasVariant(variants, "itemType", "fleet")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__hv5ZV,
                      {
                        [sty.text__itemType_fleet__hv5ZVUQr6]: hasVariant(
                          variants,
                          "itemType",
                          "fleet"
                        ),

                        [sty.text__itemType_meetingRoom__hv5ZVw4NkQ]:
                          hasVariant(variants, "itemType", "meetingRoom")
                      }
                    )}
                  >
                    {hasVariant(variants, "itemType", "meetingRoom")
                      ? "4/29/2021 4:00 PM"
                      : hasVariant(variants, "itemType", "fleet")
                      ? "09/14/2021 7:30 PM"
                      : "Enter some text"}
                  </div>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>
        </div>
      </Card>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "rejectButton",
    "acceptButton",
    "card",
    "wrapper",
    "header",
    "actions",
    "dialog",
    "roomText",
    "content",
    "columns",
    "extraInfo",
    "timeInfo"
  ],

  rejectButton: ["rejectButton"],
  acceptButton: ["acceptButton"],
  card: [
    "card",
    "wrapper",
    "header",
    "actions",
    "dialog",
    "roomText",
    "content",
    "columns",
    "extraInfo",
    "timeInfo"
  ],

  wrapper: [
    "wrapper",
    "header",
    "actions",
    "dialog",
    "roomText",
    "content",
    "columns"
  ],

  header: ["header", "actions", "dialog"],
  actions: ["actions", "dialog"],
  dialog: ["dialog"],
  roomText: ["roomText"],
  content: ["content", "columns"],
  columns: ["columns"],
  extraInfo: ["extraInfo", "timeInfo"],
  timeInfo: ["timeInfo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicListItem__ArgProps,
      internalVariantPropNames: PlasmicListItem__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicListItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListItem";
  } else {
    func.displayName = `PlasmicListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicListItem = Object.assign(
  // Top-level PlasmicListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rejectButton: makeNodeComponent("rejectButton"),
    acceptButton: makeNodeComponent("acceptButton"),
    card: makeNodeComponent("card"),
    wrapper: makeNodeComponent("wrapper"),
    header: makeNodeComponent("header"),
    actions: makeNodeComponent("actions"),
    dialog: makeNodeComponent("dialog"),
    roomText: makeNodeComponent("roomText"),
    content: makeNodeComponent("content"),
    columns: makeNodeComponent("columns"),
    extraInfo: makeNodeComponent("extraInfo"),
    timeInfo: makeNodeComponent("timeInfo"),
    // Metadata about props expected for PlasmicListItem
    internalVariantProps: PlasmicListItem__VariantProps,
    internalArgProps: PlasmicListItem__ArgProps
  }
);

export default PlasmicListItem;
/* prettier-ignore-end */
