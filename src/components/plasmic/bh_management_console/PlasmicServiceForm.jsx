// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: rCjvWQ_Miz
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import GenericFormComponent from "../../GenericFormComponent"; // plasmic-import: -oqFHJTBGG/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicServiceForm.module.css"; // plasmic-import: rCjvWQ_Miz/css

export const PlasmicServiceForm__VariantProps = new Array();

export const PlasmicServiceForm__ArgProps = new Array();

function PlasmicServiceForm__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <GenericFormComponent
        data-plasmic-name={"genericFormComponent"}
        data-plasmic-override={overrides.genericFormComponent}
        className={classNames("__wab_instance", sty.genericFormComponent)}
        redirectOnSubmitLink={"/requests"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "genericFormComponent"],
  genericFormComponent: ["genericFormComponent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServiceForm__ArgProps,
      internalVariantPropNames: PlasmicServiceForm__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicServiceForm__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServiceForm";
  } else {
    func.displayName = `PlasmicServiceForm.${nodeName}`;
  }
  return func;
}

export const PlasmicServiceForm = Object.assign(
  // Top-level PlasmicServiceForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    genericFormComponent: makeNodeComponent("genericFormComponent"),
    // Metadata about props expected for PlasmicServiceForm
    internalVariantProps: PlasmicServiceForm__VariantProps,
    internalArgProps: PlasmicServiceForm__ArgProps
  }
);

export default PlasmicServiceForm;
/* prettier-ignore-end */
