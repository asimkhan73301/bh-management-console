// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: At5FRbyuem
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import InputComponent from "../../InputComponent"; // plasmic-import: qNK1ZRC_DP/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicMeetingRoomFormFields.module.css"; // plasmic-import: At5FRbyuem/css

export const PlasmicMeetingRoomFormFields__VariantProps = new Array();

export const PlasmicMeetingRoomFormFields__ArgProps = new Array();

function PlasmicMeetingRoomFormFields__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <InputComponent
        data-plasmic-name={"roomInput"}
        data-plasmic-override={overrides.roomInput}
        label={"Available Meeting Rooms"}
        type={"select"}
      />

      <InputComponent
        data-plasmic-name={"dateInput"}
        data-plasmic-override={overrides.dateInput}
        className={classNames("__wab_instance", sty.dateInput)}
        label={"Date"}
        type={"date"}
      />

      <InputComponent
        data-plasmic-name={"typeInput"}
        data-plasmic-override={overrides.typeInput}
        children2={"Stationary"}
        className={classNames("__wab_instance", sty.typeInput)}
        label={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__vbbZ3
            )}
          >
            {"Meeting Type"}
          </div>
        }
        type={"checkbox"}
      >
        {"Refreshment"}
      </InputComponent>

      <InputComponent
        data-plasmic-name={"descriptionInput"}
        data-plasmic-override={overrides.descriptionInput}
        className={classNames("__wab_instance", sty.descriptionInput)}
        label={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__eBYcB
            )}
          >
            {"Meeting Description"}
          </div>
        }
        type={"multiLineText"}
      />

      <InputComponent
        data-plasmic-name={"approverInput"}
        data-plasmic-override={overrides.approverInput}
        className={classNames("__wab_instance", sty.approverInput)}
        label={"Approver"}
        type={"select"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "roomInput",
    "dateInput",
    "typeInput",
    "descriptionInput",
    "approverInput"
  ],

  roomInput: ["roomInput"],
  dateInput: ["dateInput"],
  typeInput: ["typeInput"],
  descriptionInput: ["descriptionInput"],
  approverInput: ["approverInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMeetingRoomFormFields__ArgProps,
      internalVariantPropNames: PlasmicMeetingRoomFormFields__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicMeetingRoomFormFields__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMeetingRoomFormFields";
  } else {
    func.displayName = `PlasmicMeetingRoomFormFields.${nodeName}`;
  }
  return func;
}

export const PlasmicMeetingRoomFormFields = Object.assign(
  // Top-level PlasmicMeetingRoomFormFields renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    roomInput: makeNodeComponent("roomInput"),
    dateInput: makeNodeComponent("dateInput"),
    typeInput: makeNodeComponent("typeInput"),
    descriptionInput: makeNodeComponent("descriptionInput"),
    approverInput: makeNodeComponent("approverInput"),
    // Metadata about props expected for PlasmicMeetingRoomFormFields
    internalVariantProps: PlasmicMeetingRoomFormFields__VariantProps,
    internalArgProps: PlasmicMeetingRoomFormFields__ArgProps
  }
);

export default PlasmicMeetingRoomFormFields;
/* prettier-ignore-end */
