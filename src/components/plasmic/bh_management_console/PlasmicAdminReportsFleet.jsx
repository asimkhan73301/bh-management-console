// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iiynbYDu6GiGaNNDvPQoVR
// Component: DPGndyKrHp
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import AdminLayout from "../../AdminLayout"; // plasmic-import: 046Osy-48bS/component
import Sidebar from "../../Sidebar"; // plasmic-import: 2ETjiGbh3p/component
import FleetByVehicalReport from "../../FleetByVehicalReport"; // plasmic-import: 6B1QJB984j-/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: iiynbYDu6GiGaNNDvPQoVR/projectcss
import * as sty from "./PlasmicAdminReportsFleet.module.css"; // plasmic-import: DPGndyKrHp/css

export const PlasmicAdminReportsFleet__VariantProps = new Array();

export const PlasmicAdminReportsFleet__ArgProps = new Array();

function PlasmicAdminReportsFleet__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        <AdminLayout
          data-plasmic-name={"adminLayout"}
          data-plasmic-override={overrides.adminLayout}
          breadcrumbs={
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text
              )}
            >
              {"Reports"}
            </div>
          }
          className={classNames("__wab_instance", sty.adminLayout)}
          hideAddButton={"hideAddButton"}
          mainWrapper={
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox)}
            >
              <FleetByVehicalReport
                data-plasmic-name={"fleetByVehicalReport"}
                data-plasmic-override={overrides.fleetByVehicalReport}
                className={classNames(
                  "__wab_instance",
                  sty.fleetByVehicalReport
                )}
              />
            </p.Stack>
          }
          type={"reporting"}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            admin={"admin"}
            className={classNames("__wab_instance", sty.sidebar)}
          />
        </AdminLayout>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "adminLayout",
    "sidebar",
    "text",
    "freeBox",
    "fleetByVehicalReport"
  ],

  adminLayout: [
    "adminLayout",
    "sidebar",
    "text",
    "freeBox",
    "fleetByVehicalReport"
  ],

  sidebar: ["sidebar"],
  text: ["text"],
  freeBox: ["freeBox", "fleetByVehicalReport"],
  fleetByVehicalReport: ["fleetByVehicalReport"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAdminReportsFleet__ArgProps,
      internalVariantPropNames: PlasmicAdminReportsFleet__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicAdminReportsFleet__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminReportsFleet";
  } else {
    func.displayName = `PlasmicAdminReportsFleet.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminReportsFleet = Object.assign(
  // Top-level PlasmicAdminReportsFleet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    adminLayout: makeNodeComponent("adminLayout"),
    sidebar: makeNodeComponent("sidebar"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    fleetByVehicalReport: makeNodeComponent("fleetByVehicalReport"),
    // Metadata about props expected for PlasmicAdminReportsFleet
    internalVariantProps: PlasmicAdminReportsFleet__VariantProps,
    internalArgProps: PlasmicAdminReportsFleet__ArgProps
  }
);

export default PlasmicAdminReportsFleet;
/* prettier-ignore-end */
